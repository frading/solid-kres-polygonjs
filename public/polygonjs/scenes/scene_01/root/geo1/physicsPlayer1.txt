// insert defines
class CustomActorEvaluator extends ActorEvaluator {
	// insert members

	// /geo1/physicsPlayer1/setPlayerInput1
	v_POLY_setPlayerInput1_left = computed(() => getPlayerInputDataLeft(this.object3D));
	v_POLY_setPlayerInput1_right = computed(() => getPlayerInputDataRight(this.object3D));
	v_POLY_setPlayerInput1_forward = computed(() => getPlayerInputDataForward(this.object3D));
	v_POLY_setPlayerInput1_backward = computed(() => getPlayerInputDataBackward(this.object3D));
	v_POLY_setPlayerInput1_jump = computed(() => getPlayerInputDataJump(this.object3D));
	v_POLY_setPlayerInput1_run = computed(() => getPlayerInputDataRun(this.object3D));

	// /geo1/physicsPlayer1/or1
	v_POLY_or1_or = computed(() =>
		orBooleans([
			this.v_POLY_setPlayerInput1_left.value,
			this.v_POLY_setPlayerInput1_right.value,
			this.v_POLY_setPlayerInput1_backward.value,
			this.v_POLY_setPlayerInput1_forward.value,
			this.v_POLY_setPlayerInput1_run.value,
			this.v_POLY_setPlayerInput1_jump.value,
		])
	);

	constructor(scene, object3D) {
		super(scene, object3D);
		// insert after constructor
	}
	// insert body

	onKey() {
		this.onKey1();
	}
	// /geo1/physicsPlayer1/onKey1
	onKey1() {
		if (keyboardEventMatchesConfig("Space ShiftLeft ShiftRight KeyW KeyA KeyS KeyD", 0.0, 0.0, 0.0, 0.0) == false) {
			return;
		}
		this.setPlayerInput1(0);
		this.code1(0);
	}

	// /geo1/physicsPlayer1/setPlayerInput1
	setPlayerInput1() {
		setPlayerInput(this.object3D, true);
	}

	// /geo1/physicsPlayer1/code1
	code1() {
		window.sendExtMsg("moveBall");
		this.object3D.updateMatrix();
	}
}
return CustomActorEvaluator;
